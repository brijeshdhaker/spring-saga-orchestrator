#
# Application Profiles.
# 
---
#
server:
  port: 8090
  application:
    name: order-service
#
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: update
      use-new-id-gnerator-mappings: false
    properties:
      hibernate:
        show-sql: true
        use-sql-comments: true
        format-sql: true
        type: info
  datasource:
    name: ORDER
    username: sa
    password:
    driverClassName: org.h2.Driver
    url: jdbc:h2:mem:ORDER
#    url: jdbc:h2:file:D:/apps/hostpath/databases/ORDER;AUTO_SERVER=true;DB_CLOSE_ON_EXIT=FALSE;DB_CLOSE_DELAY=-1;
#
  h2:
    console:
      enabled: true
      path: /h2-console
      settings:
        trace: false
        web-allow-others: true
#
  liquibase:
    enabled: false
#
management:
  endpoints:
    enabled-by-default: true
    web:
      exposure:
        include: "*"
  endpoint:
    hystrix:
      stream:
        enabled: true
    info:
      enabled: true
logging:
  level:
    root: info
#
---
#
# local profile
#
---
#
spring:
  profiles: local  
#
  cloud:
    stream:
      function:
        definition: supplier;consumer  
      bindings:
        supplier-out-0:
          destination: order-created
          producer:
            useNativeEncoding: true
        consumer-in-0:
          destination: order-updated
          consumer:
            useNativeDecoding: true
      kafka:
        binder:
          brokers: dockerhost:9092
          zkNodes: dockerhost:2181  
        bindings:
          supplier-out-0:
            producer:
              configuration:
                value.serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
                key.serializer: org.apache.kafka.common.serialization.StringSerializer
                schema.registry.url: http://dockerhost:8081  
          consumer-in-0:
            consumer:
              configuration:
                value.deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
                schema.registry.url: http://dockerhost:8081
                specific.avro.reader: true  

logging:
  level:
    root: error
#
---
#
# docker profile
#
---
#
spring:
  profiles: docker  
#
  cloud:
    stream:
      function:
        definition: supplier;consumer  
      bindings:
        supplier-out-0:
          destination: order-created
          producer:
            useNativeEncoding: true
        consumer-in-0:
          destination: order-updated
          consumer:
            useNativeDecoding: true
      kafka:
        binder:
          brokers: broker:19092
          zkNodes: zookeeper:2181  
        bindings:
          supplier-out-0:
            producer:
              configuration:
                value.serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
                key.serializer: org.apache.kafka.common.serialization.StringSerializer
                schema.registry.url: http://schema-registry:8081  
          consumer-in-0:
            consumer:
              configuration:
                value.deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
                schema.registry.url: http://schema-registry:8081
                specific.avro.reader: true 
#
logging:
  level:
    root: error
#
